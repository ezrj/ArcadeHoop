#include <Adafruit_NeoPixel.h>
#define PIN        6
#define NUMPIXELS 256
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

#define DELAYVAL 100

void setup() {
  pixels.begin();

}

// bool numeric[10][40] = {
//   /*0*/ {0,1,1,1,1,1,1,1,
//          0,1,0,0,0,1,0,1,
//          0,1,0,0,1,0,0,1,
//          0,1,0,1,0,0,0,1,
//          0,1,1,1,1,1,1,1},

//   /*1*/ {0,1,0,0,0,1,0,0,
//          0,1,0,0,0,0,1,0,
//          0,1,1,1,1,1,1,1,
//          0,1,0,0,0,0,0,0,
//          0,1,0,0,0,0,0,0},

//   /*2*/ {0,1,0,0,0,1,1,0,
//          0,1,1,0,0,0,0,1,
//          0,1,0,1,0,0,0,1,
//          0,1,0,0,1,1,1,1,
//          0,0,0,0,0,0,0,0},

//   /*3*/ {0,0,1,0,0,0,1,0,
//          0,1,0,0,0,0,0,1,
//          0,1,0,0,1,0,0,1,
//          0,0,1,1,1,1,1,0,
//          0,0,0,0,0,0,0,0},

//   /*4*/ {0,0,0,0,1,1,1,1,
//          0,0,0,0,1,0,0,0,
//          0,0,0,0,1,0,0,0,
//          0,1,1,1,1,1,1,1,
//          0,0,0,0,0,0,0,0},

//   /*5*/ {0,0,1,0,1,1,1,1,
//          0,1,0,0,1,0,0,1,
//          0,1,0,0,1,0,0,1,
//          0,0,1,1,0,0,0,1,
//          0,0,0,0,0,0,0,0},

//   /*6*/ {0,1,1,1,1,1,1,1,
//          0,1,0,0,1,0,0,1,
//          0,1,0,0,1,0,0,1,
//          0,1,0,0,1,0,0,1,
//          0,1,1,1,1,0,0,1},

//   /*7*/ {0,1,0,0,0,0,0,1,
//          0,0,1,0,0,0,0,1,
//          0,0,0,1,0,0,0,1,
//          0,0,0,0,1,0,0,1,
//          0,0,0,0,0,1,1,1},

//   /*8*/ {0,1,1,1,1,1,1,1,
//          0,1,0,0,1,0,0,1,
//          0,1,0,0,1,0,0,1,
//          0,1,0,0,1,0,0,1,
//          0,1,1,1,1,1,1,1},

//   /*9*/ {0,0,0,0,1,1,1,1,
//          0,0,0,0,1,0,0,1,
//          0,0,0,0,1,0,0,1,
//          0,0,0,0,1,0,0,1,
//          0,1,1,1,1,1,1,1}
// };

bool alpha[][12]{
  {1,1,1,1, // A
   0,1,0,1,
   1,1,1,1},
  {1,1,1,1, // B
   1,0,1,1,
   1,1,1,0},
  {1,1,1,1, // C
   1,0,0,1,
   1,0,0,1},
  {1,1,1,1, // D
   1,0,0,1,
   0,1,1,0},
  {1,1,1,1, // E
   1,0,1,1,
   1,0,0,1},
  {1,1,1,1, // F
   0,1,0,1,
   0,0,0,1},
  {1,1,1,1, // G
   1,0,0,1,
   1,1,0,1},
  {1,1,1,1, // H
   0,0,1,0,
   1,1,1,1},
  {1,0,0,1, // I
   1,1,1,1,
   1,0,0,1},
  {1,0,0,1, // J
   1,1,1,1,
   0,0,0,1},
  {1,1,1,1, // K
   0,1,1,0,
   0,0,0,1},
  {1,1,1,1, // L
   1,0,0,0,
   1,0,0,0},
  {1,1,1,1, // M
   0,1,1,1,
   1,1,1,1},
  {1,1,1,1, // N
   0,0,0,1,
   1,1,1,1},
  {1,1,1,1, // O
   1,0,0,1,
   1,1,1,1},
  {1,1,1,1, // P
   0,1,0,1,
   0,1,1,1},
  {0,1,1,1, // Q
   0,1,0,1,
   1,1,1,1},
  {1,1,1,1, // R
   0,1,1,1,
   1,0,1,1},
  {1,0,1,1, // S
   1,1,0,1,
   1,1,0,1},
  {0,0,0,1, // T
   1,1,1,1,
   0,0,0,1},
  {1,1,1,1, // U
   1,0,0,0,
   1,1,1,1},
  {0,1,1,1, // V
   1,0,0,0,
   0,1,1,1},
  {1,1,1,1, // W
   1,1,1,0,
   1,1,1,1},
  {1,0,1,1, // X
   0,1,1,0,
   1,1,0,1},
  {0,0,1,1, // Y
   1,1,1,0,
   0,1,1,1},
  {1,1,0,1, // Z
   1,0,1,1,
   1,0,1,1},
};

// bool alpha[28][40] = {
//   /*A*/ {0,1,1,1,1,1,1,0,
//          0,0,0,0,1,0,0,1,
//          0,0,0,0,1,0,0,1,
//          0,0,0,0,1,0,0,1,
//          0,1,1,1,1,1,1,0},

//   /*B*/ {0,1,1,1,1,1,1,1,
//          0,1,0,0,1,0,0,1,
//          0,1,0,0,1,0,0,1,
//          0,1,0,0,1,0,0,1,
//          0,1,1,1,0,1,1,1},

//   /*C*/ {0,0,1,1,1,1,1,0,
//          0,1,0,0,0,0,0,1,
//          0,1,0,0,0,0,0,1,
//          0,1,0,0,0,0,0,1,
//          0,1,0,0,0,0,0,1},

//   /*D*/ {0,1,1,1,1,1,1,1,
//          0,1,0,0,0,0,0,1,
//          0,1,0,0,0,0,0,1,
//          0,0,1,0,0,0,1,0,
//          0,0,0,1,1,1,0,0},

//   /*E*/ {0,1,1,1,1,1,1,1,
//          0,1,0,0,0,1,0,1,
//          0,1,0,0,0,1,0,1,
//          0,1,0,0,0,0,0,1,
//          0,1,0,0,0,0,0,1 },

//   /*F*/ {0,1,1,1,1,1,1,1,
//          0,0,0,0,1,0,0,1,
//          0,0,0,0,1,0,0,1,
//          0,0,0,0,0,0,0,1,
//          0,0,0,0,0,0,0,1},

//   /*G*/ {0,1,1,1,1,1,1,1,
//          0,1,0,0,0,0,0,1,
//          0,1,0,0,1,0,0,1,
//          0,1,0,0,1,0,0,1,
//          0,1,1,1,1,0,0,1},

//   /*H*/ {0,1,1,1,1,1,1,1,
//          0,0,0,0,1,0,0,0,
//          0,0,0,0,1,0,0,0,
//          0,0,0,0,1,0,0,0,
//          0,1,1,1,1,1,1,1},

//   /*I*/ {0,1,0,0,0,0,0,1,
//          0,1,0,0,0,0,0,1,
//          0,1,1,1,1,1,1,1,
//          0,1,0,0,0,0,0,1,
//          0,1,0,0,0,0,0,1},

//   /*J*/ {0,1,1,1,0,0,0,1,
//          0,1,0,0,0,0,0,1,
//          0,1,1,1,1,1,1,1,
//          0,0,0,0,0,0,0,1,
//          0,0,0,0,0,0,0,1},

//   /*K*/ {0,1,1,1,1,1,1,1,
//          0,0,0,0,1,0,0,0,
//          0,0,0,1,0,1,0,0,
//          0,0,1,0,0,0,1,0,
//          0,1,0,0,0,0,0,1},

//   /*L*/ {0,1,1,1,1,1,1,1,
//          0,1,0,0,0,0,0,0,
//          0,1,0,0,0,0,0,0,
//          0,1,0,0,0,0,0,0,
//          0,1,0,0,0,0,0,0},

//   /*M*/ {0,1,1,1,1,1,1,1,
//          0,0,0,0,0,0,1,0,
//          0,0,0,0,1,1,0,0,
//          0,0,0,0,0,0,1,0,
//          0,1,1,1,1,1,1,1},

//   /*N*/ {0,1,1,1,1,1,1,1,
//          0,0,0,0,0,0,1,0,
//          0,0,0,0,0,1,0,0,
//          0,0,0,0,1,0,0,0,
//          0,1,1,1,1,1,1,1},

//   /*O*/ {0,1,1,1,1,1,1,1,
//          0,1,0,0,0,0,0,1,
//          0,1,0,0,0,0,0,1,
//          0,1,0,0,0,0,0,1,
//          0,1,1,1,1,1,1,1},

//   /*P*/ {0,1,1,1,1,1,1,1,
//          0,0,0,0,1,0,0,1,
//          0,0,0,0,1,0,0,1,
//          0,0,0,0,1,0,0,1,
//          0,0,0,0,0,1,1,1},

//   /*Q*/ {0,0,1,1,1,1,1,1,
//          0,0,1,0,0,0,0,1,
//          0,0,1,1,0,0,0,1,
//          0,0,1,1,1,1,1,1,
//          0,1,0,0,0,0,0,0},

//   /*R*/ {0,1,1,1,1,1,1,1,
//          0,0,0,0,1,1,0,1,
//          0,0,0,1,0,1,0,1,
//          0,0,1,0,0,1,1,1,
//          0,1,0,0,0,0,0,0},

//   /*S*/ {0,0,1,0,0,0,1,0,
//          0,1,0,0,0,1,0,1,
//          0,1,0,0,0,1,0,1,
//          0,1,0,0,0,1,0,1,
//          0,0,1,1,1,0,0,1 },

//   /*T*/ {0,0,0,0,0,0,0,1,
//          0,0,0,0,0,0,0,1,
//          0,1,1,1,1,1,1,1,
//          0,0,0,0,0,0,0,1,
//          0,0,0,0,0,0,0,1 },

//   /*U*/ {0,1,1,1,1,1,1,1,
//          0,1,0,0,0,0,0,0,
//          0,1,0,0,0,0,0,0,
//          0,1,0,0,0,0,0,0,
//          0,1,1,1,1,1,1,1},

//   /*V*/ {0,0,0,1,1,1,1,1,
//          0,0,1,0,0,0,0,0,
//          0,1,0,0,0,0,0,0,
//          0,0,1,0,0,0,0,0,
//          0,0,0,1,1,1,1,1},

//   /*W*/ {0,1,1,1,1,1,1,1,
//          0,0,1,0,0,0,0,0,
//          0,0,0,1,1,0,0,0,
//          0,0,1,0,0,0,0,0,
//          0,1,1,1,1,1,1,1},

//   /*X*/ {0,1,1,0,0,0,1,1,
//          0,0,0,1,0,1,0,0,
//          0,0,0,0,1,0,0,0,
//          0,0,0,1,0,1,0,0,
//          0,1,1,0,0,0,1,1},

//   /*Y*/ {0,0,0,0,0,0,1,1,
//          0,0,0,0,0,1,0,0,
//          0,1,1,1,1,0,0,0,
//          0,0,0,0,0,1,0,0,
//          0,0,0,0,0,0,1,1},

//   /*Z*/ {0,1,1,0,0,0,0,1,
//          0,1,0,1,0,0,0,1,
//          0,1,0,0,1,0,0,1,
//          0,1,0,0,0,1,0,1,
//          0,1,0,0,0,0,1,1},

//   /*0*/ {0,1,1,1,1,1,1,1,
//          0,1,0,0,0,1,0,1,
//          0,1,0,0,1,0,0,1,
//          0,1,0,1,0,0,0,1,
//          0,1,1,1,1,1,1,1},

// /*1*/ {0,1,0,0,0,1,0,0,
//        0,1,0,0,0,0,1,0,
//        0,1,1,1,1,1,1,1,
//        0,1,0,0,0,0,0,0,
//        0,1,0,0,0,0,0,0},

// //   /*2*/ {0,1,0,0,0,1,1,0,
// //          0,1,1,0,0,0,0,1,
// //          0,1,0,1,0,0,0,1,
// //          0,1,0,0,1,1,1,1,
// //          0,0,0,0,0,0,0,0},

// //   /*3*/ {0,0,1,0,0,0,1,0,
// //          0,1,0,0,0,0,0,1,
// //          0,1,0,0,1,0,0,1,
// //          0,0,1,1,1,1,1,0,
// //          0,0,0,0,0,0,0,0},

// //   /*4*/ {0,0,0,0,1,1,1,1,
// //          0,0,0,0,1,0,0,0,
// //          0,0,0,0,1,0,0,0,
// //          0,1,1,1,1,1,1,1,
// //          0,0,0,0,0,0,0,0},

// //   /*5*/ {0,0,1,0,1,1,1,1,
// //          0,1,0,0,1,0,0,1,
// //          0,1,0,0,1,0,0,1,
// //          0,0,1,1,0,0,0,1,
// //          0,0,0,0,0,0,0,0},

// //   /*6*/ {0,1,1,1,1,1,1,1,
// //          0,1,0,0,1,0,0,1,
// //          0,1,0,0,1,0,0,1,
// //          0,1,0,0,1,0,0,1,
// //          0,1,1,1,1,0,0,1},

// //   /*7*/ {0,1,0,0,0,0,0,1,
// //          0,0,1,0,0,0,0,1,
// //          0,0,0,1,0,0,0,1,
// //          0,0,0,0,1,0,0,1,
// //          0,0,0,0,0,1,1,1},

// //   /*8*/ {0,1,1,1,1,1,1,1,
// //          0,1,0,0,1,0,0,1,
// //          0,1,0,0,1,0,0,1,
// //          0,1,0,0,1,0,0,1,
// //          0,1,1,1,1,1,1,1},

// //   /*9*/ {0,0,0,0,1,1,1,1,
// //          0,0,0,0,1,0,0,1,
// //          0,0,0,0,1,0,0,1,
// //          0,0,0,0,1,0,0,1,
// //          0,1,1,1,1,1,1,1}
// };

// Draw a single character
void drawChar(short position, unsigned char character, unsigned char ir, unsigned char ig, unsigned char ib) {
  // Determine which lines of the character need to be flipped vertically based on the start position (even or odd column)
  //bool flipcolumn = (position % 16 > 7) || (position % 16 < -7);
  bool flipcolumn = (position % 16 > 7) || (position % 16 < -7);

  // Loop through pixels in character and set color
  //for (unsigned char location=0; location<40; ++location) {
  for (unsigned char location=0; location<12; ++location) {
    unsigned char pixel = location;

    // Flip lines vertically based on start position and current location
    if ((flipcolumn && (location % 16 > 7)) || (!flipcolumn && (location % 16 < 8))) {
        pixel = 7 + (8 * (location / 8)) - location % 8;
    }

    // Set pixel color. Convert character to corresponding entry in array by subtracting ascii value of 'A'
    //pixels.setPixelColor(position + location, pixels.Color(ir * alpha[character - 65][pixel], ig * alpha[character - 65][pixel], ib * alpha[character - 65][pixel]));
    pixels.setPixelColor(position + location, pixels.Color(ir * alpha[character - 65][location], ig * alpha[character - 65][location], ib * alpha[character - 65][location]));
  }
}

// Draw a single character
void drawDigit(short position, unsigned short digit, unsigned char ir, unsigned char ig, unsigned char ib) {
  if (digit > 9) {
    return;
  }
  // Determine which lines of the character need to be flipped vertically based on the start position (even or odd column)
  bool flipcolumn = (position % 16 > 7) || (position % 16 < -7);

  // Loop through pixels in character and set color
  for (unsigned char location=0; location<40; ++location) {
    unsigned char pixel = location;

    // Flip lines vertically based on start position and current location
    if ((flipcolumn && (location % 16 > 7)) || (!flipcolumn && (location % 16 < 8))) {
        pixel = 7 + (8 * (location / 8)) - location % 8;
    }

    // Set pixel color. Convert character to corresponding entry in array by subtracting ascii value of 'A'
    pixels.setPixelColor(position + location, pixels.Color(ir * alpha[digit][pixel], ig * alpha[digit][pixel], ib * alpha[digit][pixel]));
  }
}

void drawSpace(short position) {
  for (unsigned char i=0; i<40; ++i) {
    unsigned char j = i;
    pixels.setPixelColor(i + position, 0, 0, 0);
  }
}


void empty(){};

int timesRun = 0;
void loop() {
  pixels.clear();
  pixels.show();
  //drawNumber(96, 3, 9, 0, 0);
  drawChar(48, 'A', 9, 0, 0);
  pixels.show();
  delay(1000);
  pixels.clear();
  pixels.show();
  //drawDigit(96, 1, 9, 0, 0);
  pixels.show();
  delay(1000);


}
